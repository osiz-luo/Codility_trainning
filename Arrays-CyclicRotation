//
An array A consisting of N integers is given. Rotation of the array means that each element is shifted right by one index, and the last element of the array is moved to the first place. For example, the rotation of array A = [3, 8, 9, 7, 6] is [6, 3, 8, 9, 7] (elements are shifted right by one index and 6 is moved to the first place).

The goal is to rotate array A K times; that is, each element of A will be shifted to the right K times.

Write a function:

class Solution { public int[] solution(int[] A, int K); }

that, given an array A consisting of N integers and an integer K, returns the array A rotated K times.

For example, given

    A = [3, 8, 9, 7, 6]
    K = 3
the function should return [9, 7, 6, 3, 8]. Three rotations were made:

    [3, 8, 9, 7, 6] -> [6, 3, 8, 9, 7]
    [6, 3, 8, 9, 7] -> [7, 6, 3, 8, 9]
    [7, 6, 3, 8, 9] -> [9, 7, 6, 3, 8]
For another example, given

    A = [0, 0, 0]
    K = 1
the function should return [0, 0, 0]

Given

    A = [1, 2, 3, 4]
    K = 4
the function should return [1, 2, 3, 4]

Assume that:

N and K are integers within the range [0..100];
each element of array A is an integer within the range [−1,000..1,000].
In your solution, focus on correctness. The performance of your solution will not be the focus of the assessment.
//

//Python解法//

def solution(A, K):
    N = len(A)
    if N == 0:
        return A  # 如果數組為空，直接返回

    K = K % N  # 處理超過數組長度的K值
    return A[-K:] + A[:-K]

//
使用 % 操作符確保 K 不超過數組的長度，這樣旋轉的次數就不會超過數組本身的長度。
修正了切片的邏輯：A[-K:] 獲取從右側數起的 K 個元素，然後將它們放在 A[:-K] 的前面，即未被選中的其餘元素前面。
//


//加入範圍條件//
def solution(A, K):
    N = len(A)
    if N == 0:
        return A  # 如果數組為空，直接返回
    
    if (0 <= N <= 100 and 0 <= K <= 100):
        if all(-1000 <= i <= 1000 for i in A):
            K = K % N  
            return A[-K:] + A[:-K] 
        else:
            return "Array elements must be within [-1000..1000]"

    else:
        return "Array length and rotation count must be within [0..100]"
